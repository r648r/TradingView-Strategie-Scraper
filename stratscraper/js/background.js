// Remplacer la fonction updateBadgeCount actuelle par celle-ci
function updateBadgeCount() {
    chrome.storage.local.get(['collectedData'], (result) => {
        const collectedData = result.collectedData || [];
        
        // Extraire les tickers uniques
        const uniqueTickers = new Set();
        collectedData.forEach(item => {
            if (item.ticker) {
                uniqueTickers.add(item.ticker);
            }
        });
        
        const uniqueCount = uniqueTickers.size;
        chrome.action.setBadgeText({ text: uniqueCount.toString() });
        chrome.action.setBadgeBackgroundColor({ color: '#4688F1' });
        console.log(`ğŸ”¢ Badge mis Ã  jour: ${uniqueCount} tickers uniques`);
    });
}

// Modifier la fonction updateCollectedData pour utiliser la nouvelle fonction updateBadgeCount
function updateCollectedData(data) {
    console.log("ğŸ“Š Mise Ã  jour des donnÃ©es collectÃ©es");
    
    chrome.storage.local.get(['collectedData'], (result) => {
        const collectedData = result.collectedData || [];
        
        // VÃ©rifier si ce ticker existe dÃ©jÃ 
        const ticker = data.ticker;
        if (ticker) {
            const existingIndex = collectedData.findIndex(item => item.ticker === ticker);
            
            if (existingIndex !== -1) {
                console.log(`ğŸ”„ Remplacement des donnÃ©es pour le ticker: ${ticker}`);
                // Remplacer les donnÃ©es existantes
                collectedData.splice(existingIndex, 1);
            }
        }
        
        collectedData.push(data);
        console.log(`ğŸ“Œ ${collectedData.length} entrÃ©es maintenant stockÃ©es`);
        
        chrome.storage.local.set({ collectedData: collectedData }, () => {
            // Mettre Ã  jour le compteur sur l'icÃ´ne avec les tickers uniques
            updateBadgeCount();
            console.log("âœ… DonnÃ©es enregistrÃ©es, badge mis Ã  jour");
        });
    });
}